require("maehler")

-- LSP config
-- local on_attach = function(_, bufnr)
-- 	local nmap = function(keys, func, desc)
-- 		if desc then
-- 			desc = "LSP: " .. desc
-- 		end
-- 		vim.keymap.set("n", keys, func, { buffer = bufnr, desc = desc })
-- 	end
--
-- 	nmap("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")
-- 	nmap("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
-- 	nmap("K", vim.lsp.buf.hover, "Hover Documentation")
-- 	nmap('<C-k>', vim.lsp.buf.signature_help, "Signature Documentation")
--
-- 	vim.api.nvim_buf_create_user_command(bufnr, "Format", function(_)
-- 		vim.lsp.buf.format()
-- 	end, { desc = "Format current buffer with LSP" })
-- end
--
-- local servers = {
-- 	lua_ls = {
-- 		Lua = {
-- 			workspace = { checkThirdParty = false },
-- 			telemetry = { enable = false },
-- 		},
-- 	},
-- 	gopls = {
-- 		analyses = {
-- 			unusedparams = true,
-- 		},
-- 		staticcheck = true,
-- 	},
-- 	tailwindcss = {
-- 		-- filetypes = { "template", "html" },
-- 		filetypes = { "aspnetcorerazor", "astro", "astro-markdown", "blade", "cojure", "django-html", "htmldjango",
-- 			"edge", "eelixir", "elixir", "ejs", "erb", "eruby", "gohtml", "gohtmltmpl", "haml", "handlebars",
-- 			"hbs", "html", "htmlangular", "html-eex", "heex", "jade", "leaf", "liquid", "markdown", "mdx", "mustasche",
-- 			"njk", "nunjucks", "php", "razor", "slim", "twig", "css", "less", "postcss", "sass", "scss", "stylus",
-- 			"sugarss", "javascript", "javascriptreact", "reason", "rescript", "typescript", "typescriptreact", "vue",
-- 			"svelte", "tmpl", "template" },
-- 	},
-- }
--
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)
--
-- local mason_lspconfig = require("mason-lspconfig")
--
-- mason_lspconfig.setup({
-- 	ensure_installed = vim.tbl_keys(servers),
-- })
--
-- mason_lspconfig.setup_handlers({
-- 	function(server_name)
-- 		require("lspconfig")[server_name].setup({
-- 			capabilities = capabilities,
-- 			on_attach = on_attach,
-- 			settings = servers[server_name],
-- 			filetypes = (servers[server_name] or {}).filetypes,
-- 		})
-- 	end
-- })
--
-- -- configure autocomplete
-- local cmp = require("cmp")
-- local luasnip = require("luasnip")
-- require("luasnip.loaders.from_vscode").lazy_load()
-- luasnip.config.setup()
--
-- cmp.setup({
-- 	snippet = {
-- 		expand = function(args)
-- 			luasnip.lsp_expand(args.body)
-- 		end,
-- 	},
-- 	mapping = cmp.mapping.preset.insert({
-- 		["<C-n>"] = cmp.mapping.select_next_item(),
-- 		["<C-u>"] = cmp.mapping.select_prev_item(),
-- 		["<C-d>"] = cmp.mapping.scroll_docs(-4),
-- 		["<C-f>"] = cmp.mapping.scroll_docs(4),
-- 		["<C-Space>"] = cmp.mapping.complete(),
-- 		["<C-y>"] = cmp.mapping.confirm({
-- 			behaviour = cmp.ConfirmBehavior.Replace,
-- 			select = true,
-- 		}),
-- 	}),
-- 	sources = {
-- 		{ name = "nvim_lsp" },
-- 		{ name = "path" },
-- 		-- { name = "codeium" },
-- 	},
-- })
--
